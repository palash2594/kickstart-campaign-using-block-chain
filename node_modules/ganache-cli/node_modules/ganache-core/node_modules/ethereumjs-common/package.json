{
  "_args": [
    [
      "ethereumjs-common@https://registry.npmjs.org/ethereumjs-common/-/ethereumjs-common-0.4.1.tgz",
      "/home/palash/Documents/Online courses/Udemy/kickstart/node_modules/ganache-cli/node_modules/ganache-core"
    ]
  ],
  "_from": "ethereumjs-common@https://registry.npmjs.org/ethereumjs-common/-/ethereumjs-common-0.4.1.tgz",
  "_id": "ethereumjs-common@0.4.1",
  "_inCache": true,
  "_location": "/ganache-cli/ganache-core/ethereumjs-common",
  "_phantomChildren": {},
  "_requested": {
    "name": "ethereumjs-common",
    "raw": "ethereumjs-common@https://registry.npmjs.org/ethereumjs-common/-/ethereumjs-common-0.4.1.tgz",
    "rawSpec": "https://registry.npmjs.org/ethereumjs-common/-/ethereumjs-common-0.4.1.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/ethereumjs-common/-/ethereumjs-common-0.4.1.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/ganache-cli/ganache-core/ethereumjs-vm"
  ],
  "_resolved": "https://registry.npmjs.org/ethereumjs-common/-/ethereumjs-common-0.4.1.tgz",
  "_shasum": "27690a24a817b058cc3a2aedef9392e8d7d63984",
  "_shrinkwrap": null,
  "_spec": "ethereumjs-common@https://registry.npmjs.org/ethereumjs-common/-/ethereumjs-common-0.4.1.tgz",
  "_where": "/home/palash/Documents/Online courses/Udemy/kickstart/node_modules/ganache-cli/node_modules/ganache-core",
  "author": "",
  "bugs": {
    "url": "https://github.com/ethereumjs/ethereumjs-common/issues"
  },
  "dependencies": {},
  "description": "Resources common to all Ethereum implementations",
  "devDependencies": {
    "coveralls": "^3.0.1",
    "documentation": "^6.3.2",
    "nyc": "^11.7.1",
    "standard": "^11.0.1",
    "tape": "^4.2.0"
  },
  "homepage": "https://github.com/ethereumjs-ethereumjs/common",
  "keywords": [
    "bootstrap",
    "constants",
    "ethereum",
    "ethereumjs",
    "genesis",
    "networks",
    "parameters"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "Holger Drewes",
      "email": "Holger.Drewes@gmail.com"
    }
  ],
  "name": "ethereumjs-common",
  "nyc": {
    "exclude": "tests/*.js"
  },
  "optionalDependencies": {},
  "readme": "# SYNOPSIS\n\n[![Build Status](https://travis-ci.org/ethereumjs/ethereumjs-common.svg?branch=master)](https://travis-ci.org/ethereumjs/ethereumjs-common)\n[![Coverage Status](https://img.shields.io/coveralls/ethereumjs/ethereumjs-common.svg?style=flat-square)](https://coveralls.io/r/ethereumjs/ethereumjs-common)\n[![JavaScript Style Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg)](https://standardjs.com) \n[![Gitter](https://img.shields.io/gitter/room/ethereum/ethereumjs.svg?style=flat-square)]()\n\n# ETHEREUMJS-COMMON\nResources common to all Ethereum implementations\n\nSucceeds the old [ethereum/common](https://github.com/ethereumjs/common/) library.\n\n# INSTALL\n`npm install ethereumjs-common`\n\n# USAGE\n\nAll parameters can be accessed through the ``Common`` class which can be required through the\nmain package and instantiated either with just the ``chain`` (e.g. 'mainnet') or the ``chain``\ntogether with a specific ``hardfork`` provided.\n\nHere are some simple usage examples:\n\n```javascript\nconst Common = require('ethereumjs-common')\n\n// Instantiate with only the chain\nlet c = new Common('ropsten')\nc.param('gasPrices', 'ecAddGas', 'byzantium') // 500\n\n// Chain and hardfork provided\nc = new Common('ropsten', 'byzantium')\nc.param('pow', 'minerReward') // 3000000000000000000\n\n// Access genesis data for Ropsten network\nc.genesis().hash // 0x41941023680923e0fe4d74a34bdac8141f2540e3ae90623718e47d66d1ca4a2d\n\n// Get bootstrap nodes for chain/network\nc.bootstrapNodes() // Array with current nodes\n```\n\nIt is encouraged to also explicitly set the ``supportedHardforks`` if the initializing library\nonly supports a certain range of ``hardforks``:\n\n```javascript\nlet c = new Common('ropsten', null, ['byzantium', 'constantinople'])\n```\n\nThis will e.g. throw an error when a param is requested for an unsupported hardfork and\nlike this prevents unpredicted behaviour.\n\n# API\n\nSee the API documentation for a full list of functions for accessing specific chain and\ndepending hardfork parameters. There are also additional helper functions like \n``paramByBlock (topic, name, blockNumber)`` or ``hardforkIsActiveOnBlock (hardfork, blockNumber)``\nto ease ``blockNumber`` based access to parameters.\n\n- [API Docs](./docs/index.md)\n\n\n# Hardfork Params\n\nThere are currently parameter changes by the following past and future hardfork by the\nlibrary supported:\n\n- ``chainstart``\n- ``homestead``\n- ``dao``\n- ``tangerineWhistle``\n- ``spuriousDragon``\n- ``byzantium``\n- ``constantinople`` (Draft)\n- ``hybridCasper`` (Draft)\n\n\nFor hardfork-specific parameter access with the ``param()`` and ``paramByBlock()`` functions\nyou can use the following ``topics``:\n\n- ``gasConfig``\n- ``gasPrices``\n- ``vm``\n- ``pow``\n- ``casper``\n- ``sharding``\n\nSee one of the hardfork files like ``byzantium.json`` in the ``hardforks`` directory\nfor an overview. For consistency, the chain start (``chainstart``) is considered an own \nhardfork.\n\nThe hardfork-specific json files only contain the deltas from ``chainstart`` and\nshouldn't be accessed directly until you have a specific reason for it.\n\nNote: The list of ``gasPrices`` and gas price changes on hardforks is consistent \nbut not complete, so there are currently gas price values missing (PRs welcome!).\n\n# Chain Params\n\nSupported chains:\n\n- ``mainnet``\n- ``ropsten``\n- ``rinkeby``\n- ``kovan``\n\nThe following chain-specific parameters are provided:\n\n- ``name``\n- ``chainId``\n- ``networkId``\n- ``genesis`` block header values\n- ``hardforks`` block numbers\n- ``bootstrapNodes`` list\n\nTo get an overview of the different parameters have a look at one of the chain-specifc\nfiles like ``mainnet.json`` in the ``chains`` directory.\n\n# Bootstrap Nodes\n\nThere is no separate config file for bootstrap nodes like in the old ``ethereum-common`` library.\nInstead use the ``common.bootstrapNodes()`` function to get nodes for a specific chain/network.\n\n# Genesis States\n\nNetwork-specific genesis files are located in the ``genesisStates`` folder.\n\nDue to the large file sizes genesis states are not directly included in the ``index.js`` file\nbut have to be accessed directly, e.g.:\n\n```javascript\nconst mainnetGenesisState = require('ethereumjs-common/genesisStates/mainnet')\n```\n\nOr by choosing dynamically:\n\n```javascript\nconst genesisStates = require('ethereumjs-common/genesisStates')\nconst mainnetGenesisState = genesisStates['mainnet']\nconst mainnetGenesisState = genesisStates[genesisStates['names'][1]] // alternative via chain Id\n```\n\n# LICENSE\n[MIT](https://opensource.org/licenses/MIT)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ethereumjs/ethereumjs-common.git"
  },
  "scripts": {
    "build:docs": "documentation build ./index.js --format md --shallow > ./docs/index.md",
    "coverage": "nyc npm run test && nyc report --reporter=text-lcov > .nyc_output/lcov.info",
    "coveralls": "npm run coverage && coveralls <.nyc_output/lcov.info",
    "lint": "standard",
    "test": "npm run lint && node tests/"
  },
  "version": "0.4.1"
}
